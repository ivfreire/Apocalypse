#include <iostream>
#include <thread>
#include <SDL2/SDL.h>
#include "game.h"

int main(int argc, char* argv[]) {
    // Initializes SDL2.0
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "SDL2 was not initialized!" << std::endl;
        return -1;
    }


    // Instanciates global variables
    int width = 1900, height = 1000;
    SDL_Window* window;
    SDL_Renderer* renderer;
    Uint32 before;
    float dtime;

    Game* game;


    // Define global variables
    window = SDL_CreateWindow(
        "Apocalypse",
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        width, height,
        SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE
    );
    if (!window) {
        std::cerr << "Windown could not be created!" << std::endl;
        return -1;
    }

    renderer = SDL_CreateRenderer(window, -1, 0);
    if (!renderer) {
        std::cerr << "Renderer could not be created!" << std::endl;
        return -1;
    } else SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);


    game = new Game(&width, &height);

    game->Start();

    // Main loop
    while(game->running) {
        SDL_Event ev;
        SDL_PollEvent(&ev);
        if (ev.type == SDL_QUIT) game->running = false;
        game->PollEvent(ev);

        game->Update(dtime);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);
        game->Render(renderer);
        SDL_RenderPresent(renderer);

        Uint32 now = SDL_GetTicks();
        Uint32 dtick = now - before;
        before = now;
        dtime = float(dtick)/1000.0f;
        if (dtime > 1.0f) dtime = 1.0f;

        SDL_GetWindowSize(window, &width, &height);
    }


    // Destroys instances and free up memory
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);


    SDL_Quit();
    return 0;
}